on:
  issues:
    types: [opened]


jobs:
  create_issue_without_parent:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event.issue.milestone == null && ${{ !contains(github.event.issue.body, '*Posted from Jira*') }}
    steps:
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch 
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    - name: Create
      id: create
      uses: atlassian/gajira-create@v3
      with:
        project: ES1
        issuetype: issue
        summary:  ${{ github.event.issue.title }} 
        description: "New Issue from ${{ github.actor}} in ${{ github.repository }} branch ${{ steps.extract_branch.outputs.branch }}\nDescription:\n${{ github.event.issue.body }}"
    - name: Create comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = context.issue.number;
          const commentBody = '${{ steps.create.outputs.issue }}'; 
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: commentBody,
          });    
             
    - name: Log created issue
      run: echo "Issue ${{ steps.create.outputs.issue }} without parent was created"

  create_issue_with_parent:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event.issue.milestone != null && ${{ !contains(github.event.issue.body, '*Posted from Jira*') }} 
    steps:
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch   
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    - name: Find in comments
      id: find
      uses: atlassian/gajira-find-issue-key@v3
      with:
        string: ${{ github.event.issue.milestone.description }}
      
    - name: Create
      id: create
      uses: atlassian/gajira-create@v3
      with:
        project: ES1
        issuetype: issue
        summary:  named ${{ github.event.issue.title }} 
        description: "New Issue from ${{ github.actor}} in ${{ github.repository }} branch ${{ steps.extract_branch.outputs.branch }}\nDescription:\n${{ github.event.issue.body }}"
        fields: '{"parent":{"key":"${{ steps.find.outputs.issue }}"}}'
        
    - name: Create comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = context.issue.number;
          const commentBody = '${{ steps.create.outputs.issue }}'; 
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: commentBody,
          });    
             
    - name: Log created issue
      run: echo "Issue ${{ steps.create.outputs.issue }} with parent ${{ steps.find.outputs.issue }} was created"
