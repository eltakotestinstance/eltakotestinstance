name: Convert Markdown and Add to Release
on:
  push:
    branches:
      - main
    
permissions: write-all
jobs:
    
    create_release:
        runs-on: ubuntu-latest
        steps:
            - name: Clear old files
              uses: AutoModality/action-clean@v1
              
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Check for modified Markdown files
              id: check_files
              run: |
                git fetch --all
                modified_files=false
                for commit in $(git log --pretty=format:%H ${{ github.event.before }}..HEAD); do
                  echo "Checking commit $commit"
                  echo "prevoius commit:"
                  git rev-parse "$commit^"
                  if git diff --name-only $commit^ $commit | grep -qE '\.md$'; then
                    echo "Found modified Markdown files"
                    modified_files=true
                    break
                  fi
                done
                echo "modifiles_files=$modified_files"
                echo "modified_files=$modified_files" >> $GITHUB_OUTPUT
    
            - name: Install Marp CLI
              if: steps.check_files.outputs.modified_files == 'true'
              run: npm install -g @marp-team/marp-cli
    
            - name: Convert Markdown files
              if: steps.check_files.outputs.modified_files == 'true'
              run: |
                  for commit in $(git log --pretty=format:%H ${{ github.event.before }}..HEAD); do
                    for file in $(git diff --name-only $commit^ $commit | grep .md$); do
                      marp $file --pdf --allow-local-files
                    done
                  done

            - name: Get next version
              if: steps.check_files.outputs.modified_files == 'true'
              uses: reecetech/version-increment@2023.9.3
              id: version
              with:
                scheme: semver
                increment: patch

            - name: Create release
              if: steps.check_files.outputs.modified_files == 'true'
              run: |
                gh release create ${{ steps.version.outputs.version }} --title "Release ${{ steps.version.outputs.version }}" --notes "Release notes for ${{ steps.version.outputs.version }}"
                gh release upload ${{ steps.version.outputs.version }} *.pdf --clobber
              env:
                GH_TOKEN: ${{ github.token }}
           